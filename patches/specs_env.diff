--- a/docs/specs/SPEC_base_env.md
+++ b/docs/specs/SPEC_base_env.md
@@ -86,6 +86,25 @@ from src.utils.logging_utils import get_logger
 
 logger = get_logger("TrainEnvLong")
 env = BaseEnv(allowed_actions=["buy", "hold"], context_macro={"direction": "long"}, logger=logger, debug=True)
+try:
+    obs = env.reset()
+    done = False
+    while not done:
+        action = agent.select_action(obs)
+        obs, reward, done, info = env.step(action)
+except ValueError as e:
+    logger.error(f"Erro controlado: {e}")
+except Exception as e:
+    logger.critical(f"Erro inesperado: {e}")
+
+# Exemplo de ação inválida
+try:
+    env.step("sell")  # Não permitido neste ambiente, dispara log crítico e penalidade
+except Exception as err:
+    logger.error(f"Ação não permitida capturada: {err}")
 ```
 
+### Estratégia de Testes Recomendada
+- [x] Testes unitários de ações permitidas/proibidas (incluindo logs gerados)
+- [x] Testes de integração (reset, ciclo de vida completo, edge cases de contexto macro)
+- [x] Simulação de erro de componente plugável (logger, position_manager, risk_manager)
+- [x] Teste de robustez com múltiplos resets consecutivos
+
+## 11. Referências Cruzadas
+- Consulte README_src_env.md para integração macro.
+- Para etapas do fluxo macro/micro, veja FLUXOGRAMAS_PIPELINE_HIERARQUICO.md (etapa "Cria ambiente RL").
+
 ---
 
 ## 10. Rastreabilidade
@@ -94,3 +113,6 @@ env = BaseEnv(allowed_actions=["buy", "hold"], context_macro={"direction": "long
 * Registrado em DEVELOP_TABLE_SRC_ENV.md
 * Relacionado a outros módulos via coluna Dependências
 * Documentado no DEV_LOG_SRC_ENV.md do ciclo
--- a/docs/specs/SPEC_logging_wrapper.md
+++ b/docs/specs/SPEC_logging_wrapper.md
@@ -108,6 +108,30 @@ while not done:
     obs, reward, done, truncated, info = wrapped_env.step(action)
 wrapped_env.save_logs()
 ```
+
+# Exemplo de stacking de wrappers e simulação de erro em função plugada
+from src.env.wrappers.logging_wrapper import LoggingWrapper
+from src.env.wrappers.normalization_wrapper import NormalizationWrapper
+
+try:
+    env = LoggingWrapper(env)
+    env = NormalizationWrapper(env, norm_type="vecnorm")
+    env.step("ação_invalida")  # dispara logging de erro
+except Exception as err:
+    env.logger.error(f"Erro ao empilhar wrappers: {err}")
+
+# Observação: monitorar overhead de logging e rotação dos arquivos ao rodar episódios longos.
+```
+
+## Estratégia de Teste
+- [x] Stacking multi-wrapper
+- [x] Funções plugadas inválidas (raises)
+- [x] Simulação de logs extensos e rotação
+- [x] Testes de concorrência
 
 ## 10. Rastreabilidade
 
@@ -115,3 +139,6 @@ wrapped_env.save_logs()
 * Integra SPEC_trade_logger, SPEC_logging_utils, SPEC_file_saver, SPEC_reward_aggregator
 * Utiliza utilitários da REFERENCE_TABLE.md
 * Documentado em DEV_LOG do ciclo
--- a/docs/README_src_env.md
+++ b/docs/README_src_env.md
@@ -96,6 +96,10 @@ env = ObservationWrapper(env, obs_fn=mask_obs, logger=logger)
 
 ## 5. Links Cruzados e Rastreabilidade
 
+## Referência Cruzada e Rastreamento
+- Todos os fluxos macro/micro estão detalhados em FLUXOGRAMAS_PIPELINE_HIERARQUICO.md
+- Veja o mapeamento de SPEC por etapa do fluxo no próprio fluxograma.
+
 * Especificações detalhadas (SPEC_xxx.md) de todos módulos em `docs/specs/`.
 * Referência oficial de utilitários e contratos: \[REFERENCE_TABLE.md], \[DEVELOP_TABLE_SRC_ENV.md], \[DEV_LOG.md]